name: "Build Docker Images & Security Checks"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  workflow_call:

jobs:
  build:
   
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-image: [django, nginx]
        os: [debian]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
     
      - name: Read Docker Image Identifiers
        id: read-docker-image-identifiers
        run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: image=moby/buildkit:master 
          
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          context: .
          push: false
          tags: defectdojo/defectdojo-${{ matrix.docker-image }}:${{ matrix.os }}
          file: Dockerfile.${{ matrix.docker-image }}-${{ matrix.os }}
          outputs: type=docker,dest=${{ matrix.docker-image }}-${{ matrix.os }}_img
          cache-from: type=gha,scope=${{ matrix.docker-image }}
          cache-to: type=gha,mode=max,scope=${{ matrix.docker-image }}
        
      - name: Load docker images
        timeout-minutes: 10
        run: docker load -i ${{ matrix.docker-image }}-${{ matrix.os }}_img

      # SAST
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: defectdojo/defectdojo-${{ matrix.docker-image }}:debian
            severity: 'CRITICAL,HIGH'
            output: 'trivy-results-${{ matrix.docker-image }}.sarif'
            
      - name: Upload Trivy scan results to GitHub Security tab
        uses:  actions/upload-artifact@v3
        with:
          name: trivy-results-${{ matrix.docker-image }}.sarif
          path: trivy-results-${{ matrix.docker-image }}.sarif    

      # Secrets
      - name: Install Whispers
        run: sudo pip install whispers
       
      - name: Run scanner for the repository
        run: whispers ${{ github.workspace }} > scan_output.json

      # DAST
      - name: Start defect-dojo
        run: ./dc-up-d.sh postgres-redis                
          
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0     
        with:
          options: --user root -v ${{ github.workspace }}:/zap/wrk/:rw
          target: "http://localhost:8080"

      - name: Upload image ${{ matrix.docker-image }} as artifact
        timeout-minutes: 10
        uses:  actions/upload-artifact@v3
        with:
          name: ${{ matrix.docker-image }}
          path: |
           ${{ matrix.docker-image }}-${{ matrix.os }}_img
           scan_output.json
          retention-days: 1
      
      - name: List docker images
        timeout-minutes: 10
        run: |
          docker images
          echo "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Save Docker image as tar file
        run: docker save -o  ${{ matrix.docker-image }}-${{ matrix.os }}_img.tar  defectdojo/defectdojo-${{ matrix.docker-image }}:${{ matrix.os }}
      
      - name: Transfer Docker image to remote server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          scp -o StrictHostKeyChecking=no ${{ matrix.docker-image }}-${{ matrix.os }}_img.tar root@87.249.53.162:/root/
          scp -o StrictHostKeyChecking=no docker/environments/postgres-redis.env root@87.249.53.162:/root/docker/environments/
          scp -o StrictHostKeyChecking=no docker-compose.yml root@87.249.53.162:/root/
          
      - name: Load Docker image on remote server
        run: |
          ssh -o StrictHostKeyChecking=no root@87.249.53.162 << 'ENDSSH'
          docker load -i /root/${{ matrix.docker-image }}-${{ matrix.os }}_img.tar
          docker compose --profile postgres-redis --env-file "./docker/environments/postgres-redis.env" up --no-deps -d
          ENDSSH
      
